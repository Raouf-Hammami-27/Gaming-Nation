@model GUI.Models.newsViewModels

@{
    ViewBag.Title = "Create";
}

@section Scripts{
    <script type="text/javascript">
        function getFiles() {
            // Get input element
            myFileList = document.getElementById("myfiles");

            // loop through files property, using length to get number of files chosen
            for (var i = 0; i < 1; i++) {
                // display them in the div

               $('#display').val(myFileList.files[i].name) ;
            }

        }
        function getFiless() {
            // Get input element

            myFileListt = document.getElementById("myfiless");
            // loop through files property, using length to get number of files chosen

            for (var i = 0; i < 1; i++) {
                // display them in the div

                $('#displayy').val(myFileListt.files[i].name);
            }
        }
    </script>
}
<h2>Create</h2>
@using (Html.BeginForm("Create", "News", FormMethod.Post, new { enctype = "multipart/form-data" }))

{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="blog">
                <div class="blog-header">
                    <h5 class="blog-title">Validation</h5>
                </div>
                <div class="blog-body">
                    <form id="movieForm" method="post" novalidate="novalidate" class="bv-form">
                        <div class="form-group has-feedback">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <small class="help-block" data-bv-validator="notEmpty" data-bv-for="title" data-bv-result="NOT_VALIDATED" style="display: none;">The title is required</small><small class="help-block" data-bv-validator="stringLength" data-bv-for="title" data-bv-result="NOT_VALIDATED" style="display: none;">The title must be less than 200 characters long</small>
                                </div>



                            </div>
                        </div>
                        <div class="form-group has-feedback">
                            <div class="form-group">
                                @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
                                @Html.TextAreaFor(model => model.description, new { @rows = 10, @cols = 150, @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.description, "", new { @class = "text-danger" })
                            </div>
                            <small class="help-block" data-bv-validator="stringLength" data-bv-for="review" data-bv-result="NOT_VALIDATED" style="display: none;">The review must be less than 500 characters long</small>
                        </div>


                        <div class="form-group has-feedback">
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.link_img, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <span class="btn btn-primary btn-file">
                                            Browse ...

                                            @Html.TextBox("idFilee", null, new { type = "file", id = "myfiles", @onchange = "getFiles()" })
                                        </span>
                                        <input type="text" id="display" class="form-control" readonly>
                                        @Html.ValidationMessageFor(model => model.link_img, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <small class="help-block" data-bv-validator="notEmpty" data-bv-for="director" data-bv-result="NOT_VALIDATED" style="display: none;">The director name is required</small>


                                <div class="col-md-4">
                                    <div class="input-group">
                                        @Html.LabelFor(model => model.link_imgg, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <span class="btn btn-primary btn-file">
                                            Browse ...

                                            @Html.TextBox("idFile", null, new { type = "file", id = "myfiless", @onchange = "getFiless()" })
                                        </span>
                                        <input type="text" id="displayy" class="form-control" readonly>
                                        @Html.ValidationMessageFor(model => model.link_imgg, "", new { @class = "text-danger" })

                                    </div>



                                </div>

                            </div>
                        </div>




                        <button type="submit" class="btn btn-default">Create</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>